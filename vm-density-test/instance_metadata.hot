heat_template_version: 2013-05-23
description: Template to create multiple instances.

parameters:
  image:
    type: string
    description: Image used for servers
  flavor:
    type: string
    description: flavor used by the servers
    default: m1.micro
    constraints:
      - custom_constraint: nova.flavor
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: admin_floating_net
  instance_count:
    type: number
    description: Number of instances to create
    default: 1
  server_endpoint:
    type: string
    description: Server endpoint address
  cidr:
    type: string
    description: Private subnet CIDR

resources:

  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: { get_param: cidr }
      dns_nameservers:
        - 8.8.8.8

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp}]

  policy_group:
    type: OS::Nova::ServerGroup
    properties:
      name: nova-server-group
      policies: [anti-affinity]

  server_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: instance_count}
      resource_def:
        type: OS::Nova::Server
        properties:
          image: { get_param: image }
          flavor: { get_param: flavor }
          networks:
            - subnet: { get_resource: private_subnet }
          scheduler_hints: { group: { get_resource: policy_group} }
          security_groups: [{get_resource: server_security_group}]
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                #!/bin/sh -x
                RETRY_COUNT=${RETRY_COUNT:-10}
                RETRY_DELAY=${RETRY_DELAY:-3}
                for i in `seq 1 $RETRY_COUNT`; do
                    instance_ip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                    [[ -n "$instance_ip" ]] && break
                    echo "Retry get_instance_ip $i"
                    sleep $RETRY_DELAY
                done
                for j in `seq 1 $RETRY_COUNT`; do
                    curl -vX POST http://$SERVER_ENDPOINT:4242/ -d "{\"instance_ip\": \"$instance_ip\", \"retry_get\": $i, \"retry_send\": $j}"
                    [ $? = 0 ] && break
                    echo "Retry send_instance_ip $j"
                    sleep $RETRY_DELAY
                done
              params:
                "$SERVER_ENDPOINT": { get_param: server_endpoint }
